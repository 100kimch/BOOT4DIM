interface Post {
  id: ID!
  body: String!
  comments: [Comment!]!
  contributor: User
  date: String!
  headerImgSrc: String
  isLike: Boolean
  isModifying: Boolean
  numComments: Int
  numIssue: Int!
  numLikes: Int!
  numShares: Int!
  themeColor: Boolean
  title: String
}

type Notice {
  id: ID!
  body: String!
  comments: [Comment!]!
  contributor: User
  date: String!
  headerImgSrc: String
  isLike: Boolean
  isModifying: Boolean
  numComments: Int
  numIssue: Int!
  numLikes: Int!
  numShares: Int!
  themeColor: Boolean
  title: String
}

type Comment {
  id: ID!
  body: String!
}

type User {
  label: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelNoticeConnection {
  items: [Notice]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelNoticeFilterInput {
  id: ModelIDFilterInput
  body: ModelStringFilterInput
  date: ModelStringFilterInput
  headerImgSrc: ModelStringFilterInput
  isLike: ModelBooleanFilterInput
  isModifying: ModelBooleanFilterInput
  numComments: ModelIntFilterInput
  numIssue: ModelIntFilterInput
  numLikes: ModelIntFilterInput
  numShares: ModelIntFilterInput
  themeColor: ModelBooleanFilterInput
  title: ModelStringFilterInput
  and: [ModelNoticeFilterInput]
  or: [ModelNoticeFilterInput]
  not: ModelNoticeFilterInput
}

type Query {
  getNotice(id: ID!): Notice
  listNotices(filter: ModelNoticeFilterInput, limit: Int, nextToken: String): ModelNoticeConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
}

input CreateNoticeInput {
  id: ID
  body: String!
  date: String!
  headerImgSrc: String
  isLike: Boolean
  isModifying: Boolean
  numComments: Int
  numIssue: Int!
  numLikes: Int!
  numShares: Int!
  themeColor: Boolean
  title: String
}

input UpdateNoticeInput {
  id: ID!
  body: String
  date: String
  headerImgSrc: String
  isLike: Boolean
  isModifying: Boolean
  numComments: Int
  numIssue: Int
  numLikes: Int
  numShares: Int
  themeColor: Boolean
  title: String
}

input DeleteNoticeInput {
  id: ID
}

type Mutation {
  createNotice(input: CreateNoticeInput!): Notice
  updateNotice(input: UpdateNoticeInput!): Notice
  deleteNotice(input: DeleteNoticeInput!): Notice
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: UpdateCommentInput!): Comment
  deleteComment(input: DeleteCommentInput!): Comment
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
}

type Subscription {
  onCreateNotice: Notice @aws_subscribe(mutations: ["createNotice"])
  onUpdateNotice: Notice @aws_subscribe(mutations: ["updateNotice"])
  onDeleteNotice: Notice @aws_subscribe(mutations: ["deleteNotice"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDFilterInput
  body: ModelStringFilterInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  body: String!
}

input UpdateCommentInput {
  id: ID!
  body: String
}

input DeleteCommentInput {
  id: ID
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  label: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  label: String!
}

input UpdateUserInput {
  label: String
}

input DeleteUserInput {
  id: ID
}
