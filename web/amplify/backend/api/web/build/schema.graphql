enum GeneralPost {
  NoticePost
}

interface Person {
  birthdate: String
  snsLogin: String
  email: String!
  email_verified: Boolean!
  name: String!
  phone_number: String!
  posts: [GeneralPost]
  avatar: String
  level: Int!
}

type User implements Person {
  birthdate: String
  snsLogin: String
  email: String!
  email_verified: Boolean!
  name: String!
  phone_number: String!
  posts: [GeneralPost]
  avatar: String
  level: Int!
}

type Contributor implements Person {
  birthdate: String
  snsLogin: String
  email: String!
  email_verified: Boolean!
  name: String!
  phone_number: String!
  posts: [GeneralPost]
  avatar: String
  level: Int!
  position: String!
}

input UserInput {
  birthdate: String
  snsLogin: String
  email: String!
  email_verified: Boolean!
  name: String!
  phone_number: String!
  posts: [GeneralPost]
  avatar: String
  level: Int
}

input ContributorInput {
  birthdate: String
  snsLogin: String
  email: String!
  email_verified: Boolean!
  name: String!
  phone_number: String!
  posts: [GeneralPost]
  avatar: String
  level: Int
  position: String!
}

interface Post {
  id: ID!
  body: String!
  comments: [Comment]
  author: User
  date: String!
  headerImgSrc: String
  isLike: Boolean
  issueName: String!
  numComments: Int
  numLikes: Int
  numShares: Int
  themeColor: String
  title: String
  topics: [String]
  whoLike: [User]
}

type NoticePost implements Post {
  id: ID!
  body: String!
  comments: [Comment]
  author: User
  date: String!
  headerImgSrc: String
  isLike: Boolean
  issueName: String!
  numComments: Int
  numLikes: Int
  numShares: Int
  themeColor: String
  title: String
  topics: [String]
  whoLike: [User]
}

type FreePost implements Post {
  id: ID!
  body: String!
  comments: [Comment]
  author: User
  date: String!
  headerImgSrc: String
  isLike: Boolean
  issueName: String!
  numComments: Int
  numLikes: Int
  numShares: Int
  themeColor: String
  title: String
  topics: [String]
  whoLike: [User]
}

type ProjectPost implements Post {
  id: ID!
  body: String!
  comments: [Comment]
  author: User
  date: String!
  headerImgSrc: String
  isLike: Boolean
  issueName: String!
  numComments: Int
  numLikes: Int
  numShares: Int
  themeColor: String
  title: String
  topics: [String]
  whoLike: [User]
  contributors: [Contributor]
}

interface Message {
  id: ID!
  body: String!
  date: String!
  postId: String!
}

type Comment implements Message {
  id: ID!
  body: String!
  date: String!
  postId: String!
  author: User!
}

type ProjectComment implements Message {
  id: ID!
  body: String!
  date: String!
  postId: String!
  projectId: String!
  author: Contributor!
}

interface Emotion {
  id: ID!
  date: String!
  postId: String!
}

type Like implements Emotion {
  id: ID!
  date: String!
  postId: String!
  author: User!
}

type projectLike implements Emotion {
  id: ID!
  date: String!
  postId: String!
  projectId: String!
  author: Contributor!
}

type Project {
  id: ID!
  proposer: Contributor!
  name: String!
  description: String!
  types: [String!]!
  topics: [String!]!
  deadlineOption: Boolean!
  startDuration: String!
  endDuration: String
  manager: String!
  personnel: Int!
  hasPlace: Boolean!
  place: String
  studyTopics: [String]
  studyMeeting: String
  studyTutor: String
  contestTopic: String
  contestProductDescription: String
  contestName: String
  contestDuedate: String
  contestObjectives: String
  seminarTopics: [String]
  seminarIsOnce: Boolean
  seminarMeeting: String
  seminarPresenter: String
  shareCopyright: String
  agileHasBeen: String
  etcDescription: String
  request: [Request]
  activities: [Activity]
  contributors: [Contributor]
  comments: [Comment]
  contents: [ProjectPost]
  fixedBudget: Int
  pictures: [Picture]
  supports: [Support]
  status: Int
  syncGithub: Boolean
  themeColor: String
}

type Request {
  id: ID!
  projectId: String
  date: String!
  requester: Contributor!
  hopePlaces: [String]
  material: String
  budget: String
  cookie: String
  extra: String
  status: Int
}

type Support {
  id: ID!
  projectId: String!
  date: String!
  status: Int!
  title: String!
  description: String
}

type Activity {
  id: ID!
  projectName: String!
  date: String!
  type: Int
  description: String
  contributors: [Contributor]
}

type Picture {
  body: String
  date: String!
  author: Contributor
  src: String!
  title: String
  comments: [Comment]
  numComments: Int
  numLikes: Int
  numShares: Int
  topics: [String]
}

type History {
  id: ID!
  date: String!
  body: String!
  author: User!
}

type Testing {
  id: ID!
  name: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelNoticePostConnection {
  items: [NoticePost]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelNoticePostFilterInput {
  id: ModelIDFilterInput
  body: ModelStringFilterInput
  date: ModelStringFilterInput
  headerImgSrc: ModelStringFilterInput
  isLike: ModelBooleanFilterInput
  issueName: ModelStringFilterInput
  numComments: ModelIntFilterInput
  numLikes: ModelIntFilterInput
  numShares: ModelIntFilterInput
  themeColor: ModelStringFilterInput
  title: ModelStringFilterInput
  topics: ModelStringFilterInput
  and: [ModelNoticePostFilterInput]
  or: [ModelNoticePostFilterInput]
  not: ModelNoticePostFilterInput
}

type Query {
  getNoticePost(id: ID!): NoticePost
  listNoticePosts(filter: ModelNoticePostFilterInput, limit: Int, nextToken: String): ModelNoticePostConnection
  getFreePost(id: ID!): FreePost
  listFreePosts(filter: ModelFreePostFilterInput, limit: Int, nextToken: String): ModelFreePostConnection
  getProjectPost(id: ID!): ProjectPost
  listProjectPosts(filter: ModelProjectPostFilterInput, limit: Int, nextToken: String): ModelProjectPostConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getProjectComment(id: ID!): ProjectComment
  listProjectComments(filter: ModelProjectCommentFilterInput, limit: Int, nextToken: String): ModelProjectCommentConnection
  getProject(id: ID!): Project
  listProjects(filter: ModelProjectFilterInput, limit: Int, nextToken: String): ModelProjectConnection
  getRequest(id: ID!): Request
  listRequests(filter: ModelRequestFilterInput, limit: Int, nextToken: String): ModelRequestConnection
  getHistory(id: ID!): History
  listHistorys(filter: ModelHistoryFilterInput, limit: Int, nextToken: String): ModelHistoryConnection
  getTesting(id: ID!): Testing
  listTestings(filter: ModelTestingFilterInput, limit: Int, nextToken: String): ModelTestingConnection
}

input CreateNoticePostInput {
  id: ID
  body: String!
  author: UserInput
  date: String!
  headerImgSrc: String
  isLike: Boolean
  issueName: String!
  numComments: Int
  numLikes: Int
  numShares: Int
  themeColor: String
  title: String
  topics: [String]
  whoLike: [UserInput]
}

input UpdateNoticePostInput {
  id: ID!
  body: String
  author: UserInput
  date: String
  headerImgSrc: String
  isLike: Boolean
  issueName: String
  numComments: Int
  numLikes: Int
  numShares: Int
  themeColor: String
  title: String
  topics: [String]
  whoLike: [UserInput]
}

input DeleteNoticePostInput {
  id: ID
}

type Mutation {
  createNoticePost(input: CreateNoticePostInput!): NoticePost
  updateNoticePost(input: UpdateNoticePostInput!): NoticePost
  deleteNoticePost(input: DeleteNoticePostInput!): NoticePost
  createFreePost(input: CreateFreePostInput!): FreePost
  updateFreePost(input: UpdateFreePostInput!): FreePost
  deleteFreePost(input: DeleteFreePostInput!): FreePost
  createProjectPost(input: CreateProjectPostInput!): ProjectPost
  updateProjectPost(input: UpdateProjectPostInput!): ProjectPost
  deleteProjectPost(input: DeleteProjectPostInput!): ProjectPost
  createComment(input: CreateCommentInput!): Comment
  updateComment(input: UpdateCommentInput!): Comment
  deleteComment(input: DeleteCommentInput!): Comment
  createProjectComment(input: CreateProjectCommentInput!): ProjectComment
  updateProjectComment(input: UpdateProjectCommentInput!): ProjectComment
  deleteProjectComment(input: DeleteProjectCommentInput!): ProjectComment
  createProject(input: CreateProjectInput!): Project
  updateProject(input: UpdateProjectInput!): Project
  deleteProject(input: DeleteProjectInput!): Project
  createRequest(input: CreateRequestInput!): Request
  updateRequest(input: UpdateRequestInput!): Request
  deleteRequest(input: DeleteRequestInput!): Request
  createHistory(input: CreateHistoryInput!): History
  updateHistory(input: UpdateHistoryInput!): History
  deleteHistory(input: DeleteHistoryInput!): History
  createTesting(input: CreateTestingInput!): Testing
  updateTesting(input: UpdateTestingInput!): Testing
  deleteTesting(input: DeleteTestingInput!): Testing
}

type Subscription {
  onCreateNoticePost: NoticePost @aws_subscribe(mutations: ["createNoticePost"])
  onUpdateNoticePost: NoticePost @aws_subscribe(mutations: ["updateNoticePost"])
  onDeleteNoticePost: NoticePost @aws_subscribe(mutations: ["deleteNoticePost"])
  onCreateFreePost: FreePost @aws_subscribe(mutations: ["createFreePost"])
  onUpdateFreePost: FreePost @aws_subscribe(mutations: ["updateFreePost"])
  onDeleteFreePost: FreePost @aws_subscribe(mutations: ["deleteFreePost"])
  onCreateProjectPost: ProjectPost @aws_subscribe(mutations: ["createProjectPost"])
  onUpdateProjectPost: ProjectPost @aws_subscribe(mutations: ["updateProjectPost"])
  onDeleteProjectPost: ProjectPost @aws_subscribe(mutations: ["deleteProjectPost"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateProjectComment: ProjectComment @aws_subscribe(mutations: ["createProjectComment"])
  onUpdateProjectComment: ProjectComment @aws_subscribe(mutations: ["updateProjectComment"])
  onDeleteProjectComment: ProjectComment @aws_subscribe(mutations: ["deleteProjectComment"])
  onCreateProject: Project @aws_subscribe(mutations: ["createProject"])
  onUpdateProject: Project @aws_subscribe(mutations: ["updateProject"])
  onDeleteProject: Project @aws_subscribe(mutations: ["deleteProject"])
  onCreateRequest: Request @aws_subscribe(mutations: ["createRequest"])
  onUpdateRequest: Request @aws_subscribe(mutations: ["updateRequest"])
  onDeleteRequest: Request @aws_subscribe(mutations: ["deleteRequest"])
  onCreateHistory: History @aws_subscribe(mutations: ["createHistory"])
  onUpdateHistory: History @aws_subscribe(mutations: ["updateHistory"])
  onDeleteHistory: History @aws_subscribe(mutations: ["deleteHistory"])
  onCreateTesting: Testing @aws_subscribe(mutations: ["createTesting"])
  onUpdateTesting: Testing @aws_subscribe(mutations: ["updateTesting"])
  onDeleteTesting: Testing @aws_subscribe(mutations: ["deleteTesting"])
}

type ModelFreePostConnection {
  items: [FreePost]
  nextToken: String
}

input ModelFreePostFilterInput {
  id: ModelIDFilterInput
  body: ModelStringFilterInput
  date: ModelStringFilterInput
  headerImgSrc: ModelStringFilterInput
  isLike: ModelBooleanFilterInput
  issueName: ModelStringFilterInput
  numComments: ModelIntFilterInput
  numLikes: ModelIntFilterInput
  numShares: ModelIntFilterInput
  themeColor: ModelStringFilterInput
  title: ModelStringFilterInput
  topics: ModelStringFilterInput
  and: [ModelFreePostFilterInput]
  or: [ModelFreePostFilterInput]
  not: ModelFreePostFilterInput
}

input CreateFreePostInput {
  id: ID
  body: String!
  author: UserInput
  date: String!
  headerImgSrc: String
  isLike: Boolean
  issueName: String!
  numComments: Int
  numLikes: Int
  numShares: Int
  themeColor: String
  title: String
  topics: [String]
  whoLike: [UserInput]
}

input UpdateFreePostInput {
  id: ID!
  body: String
  author: UserInput
  date: String
  headerImgSrc: String
  isLike: Boolean
  issueName: String
  numComments: Int
  numLikes: Int
  numShares: Int
  themeColor: String
  title: String
  topics: [String]
  whoLike: [UserInput]
}

input DeleteFreePostInput {
  id: ID
}

type ModelProjectPostConnection {
  items: [ProjectPost]
  nextToken: String
}

input ModelProjectPostFilterInput {
  id: ModelIDFilterInput
  body: ModelStringFilterInput
  date: ModelStringFilterInput
  headerImgSrc: ModelStringFilterInput
  isLike: ModelBooleanFilterInput
  issueName: ModelStringFilterInput
  numComments: ModelIntFilterInput
  numLikes: ModelIntFilterInput
  numShares: ModelIntFilterInput
  themeColor: ModelStringFilterInput
  title: ModelStringFilterInput
  topics: ModelStringFilterInput
  and: [ModelProjectPostFilterInput]
  or: [ModelProjectPostFilterInput]
  not: ModelProjectPostFilterInput
}

input CreateProjectPostInput {
  id: ID
  body: String!
  author: UserInput
  date: String!
  headerImgSrc: String
  isLike: Boolean
  issueName: String!
  numComments: Int
  numLikes: Int
  numShares: Int
  themeColor: String
  title: String
  topics: [String]
  whoLike: [UserInput]
  contributors: [ContributorInput]
}

input UpdateProjectPostInput {
  id: ID!
  body: String
  author: UserInput
  date: String
  headerImgSrc: String
  isLike: Boolean
  issueName: String
  numComments: Int
  numLikes: Int
  numShares: Int
  themeColor: String
  title: String
  topics: [String]
  whoLike: [UserInput]
  contributors: [ContributorInput]
}

input DeleteProjectPostInput {
  id: ID
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDFilterInput
  body: ModelStringFilterInput
  date: ModelStringFilterInput
  postId: ModelStringFilterInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  body: String!
  date: String!
  postId: String!
  author: UserInput!
}

input UpdateCommentInput {
  id: ID!
  body: String
  date: String
  postId: String
  author: UserInput
}

input DeleteCommentInput {
  id: ID
}

type ModelProjectCommentConnection {
  items: [ProjectComment]
  nextToken: String
}

input ModelProjectCommentFilterInput {
  id: ModelIDFilterInput
  body: ModelStringFilterInput
  date: ModelStringFilterInput
  postId: ModelStringFilterInput
  projectId: ModelStringFilterInput
  and: [ModelProjectCommentFilterInput]
  or: [ModelProjectCommentFilterInput]
  not: ModelProjectCommentFilterInput
}

input CreateProjectCommentInput {
  id: ID
  body: String!
  date: String!
  postId: String!
  projectId: String!
  author: ContributorInput!
}

input UpdateProjectCommentInput {
  id: ID!
  body: String
  date: String
  postId: String
  projectId: String
  author: ContributorInput
}

input DeleteProjectCommentInput {
  id: ID
}

input ActivityInput {
  projectName: String!
  date: String!
  type: Int
  description: String
  contributors: [ContributorInput]
}

input PictureInput {
  body: String
  date: String!
  author: ContributorInput
  src: String!
  title: String
  numComments: Int
  numLikes: Int
  numShares: Int
  topics: [String]
}

input SupportInput {
  projectId: String!
  date: String!
  status: Int!
  title: String!
  description: String
}

type ModelProjectConnection {
  items: [Project]
  nextToken: String
}

input ModelProjectFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  description: ModelStringFilterInput
  types: ModelStringFilterInput
  topics: ModelStringFilterInput
  deadlineOption: ModelBooleanFilterInput
  startDuration: ModelStringFilterInput
  endDuration: ModelStringFilterInput
  manager: ModelStringFilterInput
  personnel: ModelIntFilterInput
  hasPlace: ModelBooleanFilterInput
  place: ModelStringFilterInput
  studyTopics: ModelStringFilterInput
  studyMeeting: ModelStringFilterInput
  studyTutor: ModelStringFilterInput
  contestTopic: ModelStringFilterInput
  contestProductDescription: ModelStringFilterInput
  contestName: ModelStringFilterInput
  contestDuedate: ModelStringFilterInput
  contestObjectives: ModelStringFilterInput
  seminarTopics: ModelStringFilterInput
  seminarIsOnce: ModelBooleanFilterInput
  seminarMeeting: ModelStringFilterInput
  seminarPresenter: ModelStringFilterInput
  shareCopyright: ModelStringFilterInput
  agileHasBeen: ModelStringFilterInput
  etcDescription: ModelStringFilterInput
  fixedBudget: ModelIntFilterInput
  status: ModelIntFilterInput
  syncGithub: ModelBooleanFilterInput
  themeColor: ModelStringFilterInput
  and: [ModelProjectFilterInput]
  or: [ModelProjectFilterInput]
  not: ModelProjectFilterInput
}

input CreateProjectInput {
  id: ID
  proposer: ContributorInput!
  name: String!
  description: String!
  types: [String!]!
  topics: [String!]!
  deadlineOption: Boolean!
  startDuration: String!
  endDuration: String
  manager: String!
  personnel: Int!
  hasPlace: Boolean!
  place: String
  studyTopics: [String]
  studyMeeting: String
  studyTutor: String
  contestTopic: String
  contestProductDescription: String
  contestName: String
  contestDuedate: String
  contestObjectives: String
  seminarTopics: [String]
  seminarIsOnce: Boolean
  seminarMeeting: String
  seminarPresenter: String
  shareCopyright: String
  agileHasBeen: String
  etcDescription: String
  activities: [ActivityInput]
  contributors: [ContributorInput]
  fixedBudget: Int
  pictures: [PictureInput]
  supports: [SupportInput]
  status: Int
  syncGithub: Boolean
  themeColor: String
}

input UpdateProjectInput {
  id: ID!
  proposer: ContributorInput
  name: String
  description: String
  types: [String!]
  topics: [String!]
  deadlineOption: Boolean
  startDuration: String
  endDuration: String
  manager: String
  personnel: Int
  hasPlace: Boolean
  place: String
  studyTopics: [String]
  studyMeeting: String
  studyTutor: String
  contestTopic: String
  contestProductDescription: String
  contestName: String
  contestDuedate: String
  contestObjectives: String
  seminarTopics: [String]
  seminarIsOnce: Boolean
  seminarMeeting: String
  seminarPresenter: String
  shareCopyright: String
  agileHasBeen: String
  etcDescription: String
  activities: [ActivityInput]
  contributors: [ContributorInput]
  fixedBudget: Int
  pictures: [PictureInput]
  supports: [SupportInput]
  status: Int
  syncGithub: Boolean
  themeColor: String
}

input DeleteProjectInput {
  id: ID
}

type ModelRequestConnection {
  items: [Request]
  nextToken: String
}

input ModelRequestFilterInput {
  id: ModelIDFilterInput
  projectId: ModelStringFilterInput
  date: ModelStringFilterInput
  hopePlaces: ModelStringFilterInput
  material: ModelStringFilterInput
  budget: ModelStringFilterInput
  cookie: ModelStringFilterInput
  extra: ModelStringFilterInput
  status: ModelIntFilterInput
  and: [ModelRequestFilterInput]
  or: [ModelRequestFilterInput]
  not: ModelRequestFilterInput
}

input CreateRequestInput {
  id: ID
  projectId: String
  date: String!
  requester: ContributorInput!
  hopePlaces: [String]
  material: String
  budget: String
  cookie: String
  extra: String
  status: Int
}

input UpdateRequestInput {
  id: ID!
  projectId: String
  date: String
  requester: ContributorInput
  hopePlaces: [String]
  material: String
  budget: String
  cookie: String
  extra: String
  status: Int
}

input DeleteRequestInput {
  id: ID
}

type ModelHistoryConnection {
  items: [History]
  nextToken: String
}

input ModelHistoryFilterInput {
  id: ModelIDFilterInput
  date: ModelStringFilterInput
  body: ModelStringFilterInput
  and: [ModelHistoryFilterInput]
  or: [ModelHistoryFilterInput]
  not: ModelHistoryFilterInput
}

input CreateHistoryInput {
  id: ID
  date: String!
  body: String!
  author: UserInput!
}

input UpdateHistoryInput {
  id: ID!
  date: String
  body: String
  author: UserInput
}

input DeleteHistoryInput {
  id: ID
}

type ModelTestingConnection {
  items: [Testing]
  nextToken: String
}

input ModelTestingFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelTestingFilterInput]
  or: [ModelTestingFilterInput]
  not: ModelTestingFilterInput
}

input CreateTestingInput {
  id: ID
  name: String!
}

input UpdateTestingInput {
  id: ID!
  name: String
}

input DeleteTestingInput {
  id: ID
}
